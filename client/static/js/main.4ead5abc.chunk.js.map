{"version":3,"sources":["components/wallet.js","assets/imgs/logo.svg","components/header.js","errors/error404.js","pages/main.js","App.js","reportWebVitals.js","index.js"],"names":["SolWalletProvider","children","network","WalletAdapterNetwork","Devnet","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getTorusWallet","options","clientId","getLedgerWallet","getSolletWallet","getSolletExtensionWallet","ConnectionProvider","WalletProvider","autoConnect","require","Header","className","href","data-gatsby-image-wrapper","src","logo","Error404","to","SystemProgram","web3","programID","PublicKey","idl","metadata","address","poolPubkey","opts","Main","useState","balance","setBalance","poolBalance","setPoolBalance","connection","useConnection","wallet","useWallet","getProvider","a","provider","Provider","depositAmount","alert","program","Program","findProgramAddress","toBuffer","programId","poolSigner","rpc","deposit","BN","LAMPORTS_PER_SOL","accounts","pool","vault","depositor","publicKey","systemProgram","tx","getBalance","withdrawAmount","withdraw","receiver","parseFloat","toFixed","useEffect","style","textAlign","height","display","flexDirection","padding","fontSize","flex","onClick","e","width","borderStyle","borderWidth","marginLeft","App","outline","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ead5abc.chunk.js","sourcesContent":["import React, { FC, useMemo } from 'react';\r\nimport {\r\n    ConnectionProvider,\r\n    WalletProvider,\r\n    useConnection,\r\n    useWallet\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n    getLedgerWallet,\r\n    getPhantomWallet,\r\n    getSlopeWallet,\r\n    getSolflareWallet,\r\n    getSolletExtensionWallet,\r\n    getSolletWallet,\r\n    getTorusWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\nimport {\r\n    WalletModalProvider,\r\n    WalletDisconnectButton,\r\n} from '@solana/wallet-adapter-react-ui';\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\n\r\n// Default styles that can be overridden by your app\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nexport default function SolWalletProvider({ children = null }) {\r\n    // Can be set to 'devnet', 'testnet', or 'mainnet-beta'\r\n    const network = WalletAdapterNetwork.Devnet;\r\n\r\n    // You can also provide a custom RPC endpoint\r\n    const endpoint = useMemo(() => clusterApiUrl(network), [network]);\r\n    // const endpoint = process.env.REACT_APP_CLUSTER;\r\n\r\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --\r\n    // Only the wallets you configure here will be compiled into your application\r\n    const wallets = useMemo(() => [\r\n        getPhantomWallet(),\r\n        getSlopeWallet(),\r\n        getSolflareWallet(),\r\n        getTorusWallet({\r\n            options: { clientId: 'Get a client ID @ https://developer.tor.us' }\r\n        }),\r\n        getLedgerWallet(),\r\n        getSolletWallet({ network }),\r\n        getSolletExtensionWallet({ network }),\r\n    ], [network]);\r\n\r\n\r\n    return (\r\n        <ConnectionProvider endpoint={endpoint}>\r\n            <WalletProvider wallets={wallets} autoConnect>\r\n                {children}\r\n            </WalletProvider>\r\n        </ConnectionProvider>\r\n    );\r\n};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as React from 'react';\r\nimport Wallet from './wallet';\r\nimport '../styles/Header.css';\r\nimport logo from '../assets/imgs/logo.svg';\r\nimport {\r\n    WalletModalProvider,\r\n    WalletDisconnectButton,\r\n    WalletMultiButton\r\n} from '@solana/wallet-adapter-react-ui';\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"css-m7wkyr\">\r\n            <div className=\"css-1kj7ifn\">\r\n                <div className=\"css-1j66gwz\">\r\n                    <div className=\"chakra-stack css-1i0wgq1\">\r\n                        <div className=\"chakra-stack css-oft45e\">\r\n                            <a href=\"/\">\r\n                                <div className=\"gatsby-image-wrapper gatsby-image-wrapper-constrained\">\r\n                                    <div data-gatsby-image-wrapper=\"\" className=\"gatsby-image-wrapper gatsby-image-wrapper-constrained\">\r\n                                        <img src={logo} className=\"logo\"></img>\r\n                                    </div>\r\n                                </div>\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"chakra-stack css-n4g6ml\">\r\n\r\n                    </div>\r\n                    <div className=\"chakra-stack css-1u6kme8\">\r\n                        <WalletModalProvider>\r\n                            <WalletMultiButton />\r\n                        </WalletModalProvider>\r\n                    </div>\r\n                    <div className=\"chakra-stack css-1buqvcx\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Error404 = () => (\r\n    <div>\r\n        <h1>404 - Not Found!</h1>\r\n        <Link to=\"/\">\r\n            Go Home\r\n        </Link>\r\n    </div>\r\n);\r\n\r\nexport default Error404;","import React, { useState, useEffect } from 'react';\r\n\r\nimport { PublicKey, LAMPORTS_PER_SOL } from '@solana/web3.js';\r\nimport { Program, Provider, web3, BN } from '@project-serum/anchor';\r\n\r\nimport '../styles/Main.css';\r\nimport idl from '../json/deposit_withdraw.json';\r\n\r\nimport {\r\n    useWallet,\r\n    useConnection\r\n} from '@solana/wallet-adapter-react';\r\nrequire('@solana/wallet-adapter-react-ui/styles.css');\r\n\r\nconst { SystemProgram } = web3;\r\nconst programID = new PublicKey(idl.metadata.address);\r\nconst poolPubkey = new PublicKey('FuCh2kneiSqhT8s55CHHamxkryBdMUgSmm1xT54QMRUF');\r\n\r\nconst opts = {\r\n    preflightCommitment: \"processed\"\r\n}\r\nexport default function Main() {\r\n    const [balance, setBalance] = useState(0);\r\n    const [poolBalance, setPoolBalance] = useState(0);\r\n    const { connection } = useConnection();\r\n\r\n    const wallet = useWallet();\r\n    async function getProvider() {\r\n        const provider = new Provider(\r\n            connection, wallet, opts.preflightCommitment,\r\n        );\r\n        return provider;\r\n    }\r\n\r\n    async function deposit(depositAmount) {\r\n        if (balance < depositAmount) {\r\n            alert(\"Your balance is not enough! please deposit some sol to your wallet.\");\r\n            return;\r\n        }\r\n        const provider = await getProvider()\r\n        const program = new Program(idl, programID, provider);\r\n\r\n        const [\r\n            poolSigner,\r\n            _nonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [\r\n                poolPubkey.toBuffer(),\r\n            ],\r\n            program.programId\r\n            );\r\n        \r\n        try {\r\n            const tx = await program.rpc.deposit(new BN(depositAmount * LAMPORTS_PER_SOL), {\r\n                accounts: {\r\n                    pool: poolPubkey,\r\n                    vault: poolSigner,\r\n                    depositor: wallet.publicKey,\r\n                    poolSigner: poolSigner,\r\n                    systemProgram: SystemProgram.programId,\r\n                },\r\n            });\r\n\r\n            alert(\"Successfully deposited! TrxID: \" + tx);\r\n            getBalance();\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    async function withdraw(withdrawAmount) {\r\n        if (balance < withdrawAmount) {\r\n            alert(\"Your balance is not enough! please deposit some sol to your wallet.\");\r\n            return;\r\n        }\r\n        const provider = await getProvider()\r\n        const program = new Program(idl, programID, provider);\r\n\r\n        const [\r\n            poolSigner,\r\n            _nonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [\r\n                poolPubkey.toBuffer(),\r\n            ],\r\n            programID\r\n            );\r\n        \r\n        try {\r\n            const tx = await program.rpc.withdraw(new BN(withdrawAmount * LAMPORTS_PER_SOL), {\r\n                accounts: {\r\n                    pool: poolPubkey,\r\n                    vault: poolSigner,\r\n                    receiver: wallet.publicKey,\r\n                    poolSigner: poolSigner,\r\n                    systemProgram: SystemProgram.programId,\r\n                },\r\n            });\r\n\r\n            alert(\"Successfully withdrawed! TrxID: \" + tx);\r\n            getBalance();\r\n        } catch (e) {\r\n            alert(\"You have not access for withdraw\")\r\n        }\r\n    }\r\n\r\n    async function getBalance() {\r\n        const balance = await connection.getBalance(wallet.publicKey);\r\n        setBalance(parseFloat((balance / LAMPORTS_PER_SOL).toFixed(5)));\r\n        \r\n        const [\r\n            poolSigner,\r\n            _nonce,\r\n        ] = await PublicKey.findProgramAddress(\r\n            [\r\n                poolPubkey.toBuffer(),\r\n            ],\r\n            programID\r\n            );\r\n        \r\n        const poolBalance = await connection.getBalance(poolSigner);\r\n        setPoolBalance(parseFloat((poolBalance / LAMPORTS_PER_SOL).toFixed(5)))\r\n    }\r\n\r\n    useEffect(async () => {\r\n        if (wallet.publicKey) {\r\n            await getBalance()\r\n        }\r\n    }, [wallet])\r\n\r\n    return (\r\n        <div style={{ textAlign: 'center', height: 'calc(100vh - 80px)', display: 'flex', flexDirection: 'column' }}>\r\n            <div style={{ padding: 20, fontSize: 30 }}>Your Balance: {balance} SOL</div>\r\n            <div style={{ padding: 20, fontSize: 30 }}>Pool Balance: {poolBalance} SOL</div>\r\n            \r\n            <div style={{ padding: 20 }}>Deposit</div>\r\n            <div style={{ flex: 1 }}>\r\n                <button onClick={(e) => deposit(1)} style={{ width: 125, padding: 10, borderStyle: 'solid', borderWidth: 1, marginLeft: 5 }}>1 SOL Deposit</button>\r\n            </div>\r\n\r\n            <div style={{ padding: 20 }}>Withdraw</div>\r\n            <div style={{ flex: 1 }}>\r\n                <button onClick={(e) => withdraw(0.5)} style={{ width: 125, padding: 10, borderStyle: 'solid', borderWidth: 1, marginLeft: 5 }}>0.5 SOL Withdraw</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\n\r\nimport Header from './components/header';\r\nimport Error404 from './errors/error404';\r\nimport Main from './pages/main';\r\nimport SolWalletProvider from './components/wallet';\r\nimport './styles/App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <SolWalletProvider>\r\n      <div className=\"App\">\r\n        <div style={{ outline: 'none' }}>\r\n          <div className=\"css-1r88i0x\">\r\n            <Header />\r\n            <Router>\r\n              <Switch>\r\n                <Route exact path=\"/\">\r\n                  <Redirect to=\"/home\" />\r\n                </Route>\r\n                <Route exact path=\"/home\" component={Main} />\r\n                <Route component={Error404} />\r\n              </Switch>\r\n            </Router>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </SolWalletProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}